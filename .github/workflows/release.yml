name: Create Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

jobs:
  check_release:
    runs-on: ubuntu-latest
    if: |
      github.event.pull_request.merged == true && (
      contains(github.event.pull_request.head.ref, 'hotfix/v') ||
      contains(github.event.pull_request.head.ref, 'release/v')
      )
    outputs:
      version: ${{ steps.get_version.outputs.version }}
    steps:
      - name: Extract version from branch name
        id: get_version
        run: |
          BRANCH="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH#*/v}"  # Remove prefix up to v
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-release:
    needs: check_release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.13']
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Install UV
        uses: astral-sh/setup-uv@v2
        with:
          version: "latest"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22'

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: |
            ~/.npm
            frontend/node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('frontend/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install minimal system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            python3-dev

      - name: Install Python dependencies
        run: uv sync --group dev

      - name: Install frontend dependencies
        working-directory: frontend
        run: |
          # Generate a fresh package-lock.json and install dependencies
          npm install --package-lock-only
          npm install

      - name: Build frontend
        working-directory: frontend
        run: npm run build

      - name: Copy frontend to package
        run: |
          mkdir -p radio_telemetry_tracker_drone_gcs/frontend_dist
          cp -r frontend/dist/* radio_telemetry_tracker_drone_gcs/frontend_dist/

      - name: Build wheel
        run: uv build

      - name: Run tests
        run: uv run pytest

      - name: Lint code
        run: uv run ruff check .

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ matrix.os }}
          path: dist/
          retention-days: 1

  create-release:
    needs: [check_release, build-and-release]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine artifacts
        run: |
          mkdir -p combined-dist
          cp artifacts/dist-ubuntu-latest/* combined-dist/ 2>/dev/null || true
          cp artifacts/dist-windows-latest/* combined-dist/ 2>/dev/null || true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.check_release.outputs.version }}
          name: Release v${{ needs.check_release.outputs.version }}
          files: combined-dist/*
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 